{"version":3,"file":"useCookieConsent-n_xe8OZG.js","sources":["../../../../composables/useCookieConsent.js"],"sourcesContent":["import { ref, onMounted, watch } from 'vue';\nimport { PP_LOBBY_LINK, getCookie, setCookie } from './globalData';\n\n// Create global reactive state\nconst globalShowBanner = ref(false);\nconst globalPreferences = ref({\n  necessary: true,\n  analytics: true,\n  affiliate: true\n});\nconst globalIsPreferencesOpen = ref(false);\nconst hasUserMadeChoice = ref(false);\n\nexport function useCookieConsent() {\n  const showBanner = globalShowBanner;\n  const isPreferencesOpen = globalIsPreferencesOpen;\n  const pendingTracker = ref(null);\n  \n  const regLink = ref('');\n  const loginLink = ref('');\n  const playLink = ref('');\n  \n  const preferences = globalPreferences;\n\n  const cookieCategories = [\n    {\n      id: 'necessary',\n      label: 'Necessary Cookies',\n      description: 'Essential for website functionality. These cookies are required and cannot be disabled.',\n      required: true\n    },\n    {\n      id: 'analytics',\n      label: 'Analytics Cookies',\n      description: 'Help us understand how visitors interact with our website. These cookies collect anonymous information.',\n      required: false\n    },\n    {\n      id: 'affiliate',\n      label: 'Affiliate Tracking',\n      description: 'Essential for our business operations. We use a unique identifier stored for 30 days to credit our partners when you visit gaming sites. No personal data is collected.',\n      required: true\n    }\n  ];\n\n  const getTrackerFromURL = () => {\n    if (typeof window === 'undefined') return null;\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('tracker');\n  };\n\n  const updateLobbyLinks = (tracker) => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const btag = urlParams.get('btag');\n    const affid = urlParams.get('affid');\n    \n    // Always check URL for tracker first\n    let finalTracker = urlParams.get('tracker');\n    \n    // If no URL tracker, use passed tracker or cookie tracker (always, since it's necessary)\n    if (!finalTracker) {\n        finalTracker = tracker || getCookie('affiliateTracker');\n    }\n    \n    // Build query string with all available parameters\n    let queryParams = [];\n    if (finalTracker) queryParams.push(`tracker=${finalTracker}`);\n    if (btag) queryParams.push(`btag=${btag}`);\n    if (affid) queryParams.push(`affid=${affid}`);\n    \n    const queryString = queryParams.join('&');\n    const queryStringWithQuestionMark = queryString ? `?${queryString}` : '';\n    \n    regLink.value = `${PP_LOBBY_LINK}${queryStringWithQuestionMark}#registration`;\n    loginLink.value = `${PP_LOBBY_LINK}${queryStringWithQuestionMark}#login`;\n    playLink.value = `${PP_LOBBY_LINK}${queryStringWithQuestionMark}#play/`;\n  };\n\n  const setAffiliateTracking = (tracker) => {\n    // Since affiliate tracking is now necessary, we don't check for consent\n    if (!tracker) {\n        updateLobbyLinks(null);\n        return;\n    }\n    \n    const expiryDate = new Date();\n    expiryDate.setDate(expiryDate.getDate() + 30);\n    \n    // Enhanced cookie attributes for better security and standard compliance\n    document.cookie = `affiliateTracker=${tracker}; max-age=${30*24*60*60}; path=/; SameSite=Strict; Secure`;\n    \n    // Add tracker to localStorage as a backup\n    try {\n      localStorage.setItem('affiliateTracker', tracker);\n    } catch (e) {\n      console.warn('Failed to store affiliate tracker in localStorage:', e);\n    }\n    \n    updateLobbyLinks(tracker);\n  };\n\n  const clearAnalyticsCookies = () => {\n    if (typeof document === 'undefined') return;\n    \n    // List of Google Analytics cookies to remove\n    const gaCookies = ['_ga', '_gid', '_gat', '_ga_', 'AMP_TOKEN', '_gac_'];\n    const cookies = document.cookie.split(';');\n\n    cookies.forEach(cookie => {\n      const name = cookie.split('=')[0].trim();\n      // Check if cookie starts with any of the GA prefixes\n      if (gaCookies.some(prefix => name.startsWith(prefix))) {\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${window.location.hostname}`;\n      }\n    });\n\n    // Clear GA items from localStorage\n    try {\n      Object.keys(localStorage).forEach(key => {\n        if (key.startsWith('_ga') || key.startsWith('ga:')) {\n          localStorage.removeItem(key);\n        }\n      });\n    } catch (e) {\n      console.warn('Failed to clear GA localStorage items:', e);\n    }\n  };\n\n  const handleAnalytics = (enabled) => {\n    if (typeof window === 'undefined') return;\n    \n    // Check Do Not Track setting\n    const dnt = navigator.doNotTrack || window.doNotTrack || navigator.msDoNotTrack;\n    if (dnt === \"1\" || dnt === \"yes\") {\n      enabled = false;\n    }\n\n    // If analytics is disabled, clear all analytics-related storage\n    if (!enabled) {\n      // Clear analytics cookies\n      const cookies = document.cookie.split(';')\n        .map(cookie => cookie.split('=')[0].trim())\n        .filter(name => name.startsWith('_ga') || name.startsWith('_gid') || name.startsWith('_gat') || name.startsWith('_dc_gtm'));\n\n      cookies.forEach(name => {\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${window.location.hostname}`;\n      });\n\n      // Clear analytics localStorage items\n      Object.keys(localStorage).forEach(key => {\n        if (key.startsWith('_ga') || key.startsWith('ga:')) {\n          localStorage.removeItem(key);\n        }\n      });\n\n      // Remove GTM/GA objects\n      delete window.ga;\n      delete window.google_tag_manager;\n      delete window.google_tag_data;\n      delete window._gaq;\n      delete window.gaData;\n      delete window.gaGlobal;\n\n      // Reset dataLayer to initial state\n      if (window.dataLayer) {\n        const initialConfig = window.dataLayer[0];\n        window.dataLayer = [initialConfig];\n      }\n    } else {\n      // Analytics is enabled, initialize GTM and GA\n      if (window.dataLayer) {\n        // First update consent state\n        window.dataLayer.push({\n          'event': 'consent_update',\n          'analytics_storage': 'granted',\n          'ad_storage': 'granted',\n          'functionality_storage': 'granted',\n          'personalization_storage': 'granted',\n          'security_storage': 'granted'\n        });\n\n        // Check if GTM has already been initialized (script exists)\n        const gtmScriptExists = document.querySelector('script[src*=\"googletagmanager.com/gtm.js\"]');\n        \n        // Then initialize GTM if user has made a choice and GTM isn't already loaded\n        if (hasUserMadeChoice.value && window.initializeGTM && !gtmScriptExists) {\n          window.initializeGTM();\n        }\n\n        // Push page view event after initialization\n        window.dataLayer.push({\n          'event': 'pageview',\n          'page_path': window.location.pathname,\n          'page_title': document.title\n        });\n      }\n    }\n  };\n\n  const clearNonEssentialCookies = () => {\n    if (typeof document === 'undefined') return;\n    \n    // Only keep PHPSESSID and affiliateTracker (now a necessary cookie)\n    const cookiesToKeep = ['PHPSESSID', 'affiliateTracker'];\n    const cookies = document.cookie.split(';');\n\n    cookies.forEach(cookie => {\n      const name = cookie.split('=')[0].trim();\n      if (!cookiesToKeep.includes(name)) {\n        // Remove cookie from all possible domains and paths\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${window.location.hostname}`;\n      }\n    });\n\n    // Also clear any Google Analytics or GTM cookies\n    const gaAndGtmCookies = document.cookie.split(';')\n      .map(cookie => cookie.split('=')[0].trim())\n      .filter(name => name.startsWith('_ga') || name.startsWith('_gid') || name.startsWith('_gat') || name.startsWith('_dc_gtm'));\n\n    gaAndGtmCookies.forEach(name => {\n      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;\n      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${window.location.hostname}`;\n    });\n  };\n\n  const saveToLocalStorage = (prefs) => {\n    if (!hasUserMadeChoice.value) return;\n    \n    // Only clear cookies if user has explicitly declined analytics\n    if (!prefs.analytics) {\n      clearNonEssentialCookies();\n    }\n\n    localStorage.setItem('cookieConsent', JSON.stringify({\n      preferences: prefs,\n      timestamp: new Date().toISOString(),\n      version: '1.0'\n    }));\n\n    // Always handle affiliate tracking since it's necessary\n    // Prioritize URL parameters over existing cookies\n    const urlTracker = getTrackerFromURL();\n    if (urlTracker) {\n      setAffiliateTracking(urlTracker);\n    } else if (pendingTracker.value) {\n      setAffiliateTracking(pendingTracker.value);\n    } else {\n      const existingTracker = getCookie('affiliateTracker') || localStorage.getItem('affiliateTracker');\n      updateLobbyLinks(existingTracker);\n    }\n\n    handleAnalytics(prefs.analytics);\n  };\n\n  const handleAcceptAll = () => {\n    hasUserMadeChoice.value = true;\n    const allAccepted = {\n      necessary: true,\n      analytics: true,\n      affiliate: true\n    };\n    preferences.value = allAccepted;\n    \n    // First save preferences to localStorage\n    saveToLocalStorage(allAccepted);\n    \n    // Then explicitly handle analytics initialization\n    handleAnalytics(true);\n    \n    showBanner.value = false;\n  };\n\n  const clearAllStorage = () => {\n    if (typeof window === 'undefined') return;\n    \n    // Clear cookies\n    const cookiesToKeep = ['PHPSESSID', 'affiliateTracker'];\n    const cookies = document.cookie.split(';');\n\n    cookies.forEach(cookie => {\n      const name = cookie.split('=')[0].trim();\n      if (!cookiesToKeep.includes(name)) {\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${window.location.hostname}`;\n      }\n    });\n\n    // Clear localStorage except for essential items\n    const localStorageKeep = ['cookieConsent'];\n    Object.keys(localStorage).forEach(key => {\n      if (!localStorageKeep.includes(key)) {\n        localStorage.removeItem(key);\n      }\n    });\n\n    // Clear sessionStorage completely\n    sessionStorage.clear();\n\n    // Clear any Google Analytics or GTM data\n    if (window.dataLayer) {\n      // Keep only the initial dataLayer configuration\n      const initialConfig = window.dataLayer[0];\n      window.dataLayer = [initialConfig];\n    }\n\n    // Remove any Google Analytics objects\n    delete window.ga;\n    delete window.google_tag_manager;\n    delete window.google_tag_data;\n    delete window._gaq;\n    delete window.gaData;\n    delete window.gaGlobal;\n  };\n\n  const handleDeclineAll = () => {\n    hasUserMadeChoice.value = true;\n    const allDeclined = {\n      necessary: true,\n      analytics: false,\n      affiliate: true\n    };\n    preferences.value = allDeclined;\n    clearAllStorage();\n    saveToLocalStorage(allDeclined);\n    showBanner.value = false;\n  };\n\n  const savePreferences = () => {\n    hasUserMadeChoice.value = true;\n    const finalPreferences = {\n      ...preferences.value,\n      necessary: true,\n      affiliate: true  // Always keep affiliate tracking enabled\n    };\n    preferences.value = finalPreferences;\n    saveToLocalStorage(finalPreferences);\n    showBanner.value = false;\n    isPreferencesOpen.value = false;\n  };\n\n  const handleOpenPreferences = () => {\n    isPreferencesOpen.value = true;\n    if (!localStorage.getItem('cookieConsent')) {\n      preferences.value = {\n        necessary: true,\n        analytics: true,\n        affiliate: true\n      };\n    } else {\n      try {\n        const { preferences: savedPreferences } = JSON.parse(localStorage.getItem('cookieConsent'));\n        preferences.value = {\n          ...savedPreferences,\n          necessary: true,\n          affiliate: true  // Always keep affiliate tracking enabled\n        };\n      } catch (e) {\n        preferences.value = {\n          necessary: true,\n          analytics: true,\n          affiliate: true\n        };\n      }\n    }\n  };\n\n  const getConsentStatus = () => {\n    const savedConsent = localStorage.getItem('cookieConsent');\n    if (!savedConsent) return null;\n    \n    try {\n      return JSON.parse(savedConsent);\n    } catch (e) {\n      return null;\n    }\n  };\n\n  const withdrawConsent = () => {\n    clearAllStorage();\n    localStorage.removeItem('cookieConsent');\n    preferences.value = {\n      necessary: true,\n      analytics: false,\n      affiliate: true\n    };\n    updateLobbyLinks(null);\n    showBanner.value = true;\n  };\n\n  onMounted(() => {\n    const savedConsent = localStorage.getItem('cookieConsent');\n    \n    // Priority order for affiliate tracking:\n    // 1. URL parameters\n    // 2. Cookie\n    // 3. localStorage backup\n    const urlTracker = getTrackerFromURL();\n    const cookieTracker = getCookie('affiliateTracker');\n    const localStorageTracker = localStorage.getItem('affiliateTracker');\n    \n    // Use tracker based on priority\n    const trackerToUse = urlTracker || cookieTracker || localStorageTracker;\n    \n    if (savedConsent) {\n      try {\n        const { preferences: savedPreferences } = JSON.parse(savedConsent);\n        hasUserMadeChoice.value = true;\n        preferences.value = {\n          ...savedPreferences,\n          necessary: true,\n          affiliate: true\n        };\n        \n        // Always handle affiliate tracking regardless of consent status since it's necessary\n        if (trackerToUse) {\n          setAffiliateTracking(trackerToUse);\n        } else {\n          updateLobbyLinks(null);\n        }\n\n        handleAnalytics(savedPreferences.analytics);\n        \n        showBanner.value = false;\n      } catch (e) {\n        console.error('Error parsing saved consent:', e);\n        hasUserMadeChoice.value = false;\n        preferences.value = {\n          necessary: true,\n          analytics: true,\n          affiliate: true\n        };\n        showBanner.value = true;\n        \n        // Still use tracker even if consent parsing fails\n        if (trackerToUse) {\n          setAffiliateTracking(trackerToUse);\n        } else {\n          updateLobbyLinks(null);\n        }\n      }\n    } else {\n      // First visit - set default preferences to all enabled but don't apply them yet\n      hasUserMadeChoice.value = false;\n      preferences.value = {\n        necessary: true,\n        analytics: true,\n        affiliate: true\n      };\n      \n      // Always handle affiliate tracking regardless of consent banner state\n      if (trackerToUse) {\n        setAffiliateTracking(trackerToUse);\n      } else {\n        updateLobbyLinks(null);\n      }\n      \n      showBanner.value = true;\n    }\n  });\n\n  // Add watch effect for preferences changes\n  watch(preferences, (newPrefs) => {\n    if (typeof window === 'undefined') return;\n    \n    // Update all necessary state when preferences change\n    saveToLocalStorage(newPrefs);\n    handleAnalytics(newPrefs.analytics);\n    \n    // Always handle affiliate tracking since it's necessary now\n    const urlTracker = getTrackerFromURL();\n    const cookieTracker = getCookie('affiliateTracker');\n    const localStorageTracker = localStorage.getItem('affiliateTracker');\n    \n    // Use tracker based on priority\n    const trackerToUse = urlTracker || pendingTracker.value || cookieTracker || localStorageTracker;\n    \n    if (trackerToUse) {\n      setAffiliateTracking(trackerToUse);\n    } else {\n      updateLobbyLinks(null);\n    }\n  }, { deep: true });\n\n  return {\n    showBanner,\n    isPreferencesOpen,\n    preferences,\n    cookieCategories,\n    handleAcceptAll,\n    handleDeclineAll,\n    savePreferences,\n    handleOpenPreferences,\n    withdrawConsent,\n    getConsentStatus,\n    regLink,\n    loginLink,\n    playLink\n  };\n} "],"names":[],"mappings":"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"}