{"file":"index-NpI1siox.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AA0CA,UAAM,cAAc,IAAI,EAAE;AAkB1B,IAAA,CAAA,QAAA,SAAA,IAAAA,iBAAA,YAAM,aAAa,gBAAgB,YAAY;AAC7C,UAAI;AACF,cAAM,SAAU;AAAA,MACjB,SAAQ,OAAO;AACd,gBAAQ,MAAM,+BAA+B,KAAK;AAAA,MACtD;AAAA,IACA,CAAC,CAAA;;;;;;;;;;;;;;;;;","names":["_withAsyncContext"],"sources":["../../../../pages/compliance/index.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"bg-white py-10\">\n            <div class=\"container mx-auto px-0\">\n                <div class=\"g-btn-wrapper mt-10 md:mt-20 flex flex-wrap justify-center\">\n                    <button v-for=\"(value, key) in globalContent\" :key=\"key\" @click=\"handleClick(key)\"\n                        class=\"h-10 px-4 md:px-8 m-2 text-gray-100 transition-colors duration-150 bg-gray-700 rounded-lg focus:shadow-outline hover:bg-gray-800 uppercase text-xs md:text-base\">\n                        {{ msgTranslate?.[value] || value }}\n                    </button>\n                </div>\n\n                <div class=\"px-4\">\n                    <div v-html=\"htmlContent\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n\n<script setup>\n\nfunction updateCode(key, globalContent) {\n    const code = globalContent[key];\n    return code; // Return the code value\n}\n\nasync function fetchContent(code) {\n    try {\n        // Use the optimized fetchCachedContent function with KV caching\n        const htmlContent = await fetchCachedContent(code, lang.value);\n        return htmlContent;\n    } catch (error) {\n        console.error('Error fetching compliance content:', error);\n        return '';\n    }\n}\n\nimport { ref, onMounted } from 'vue';\nimport { msgTranslate, globalContent, loadLang, loadTranslations, fetchCachedContent, lang, PP_API_URL, WHITELABEL_ID } from '~/composables/globalData';\nimport { useAsyncData } from '#app';\n\nconst htmlContent = ref('');\n\nonMounted(async () => {\n    try {\n        htmlContent.value = await fetchContent('aboutus');\n        await loadTranslations();\n        await loadLang();\n    } catch (error) {\n        console.error('Error:', error);\n    }\n});\n\nconst handleClick = async (key) => {\n    const code = updateCode(key, globalContent.value);\n    htmlContent.value = await fetchContent(code);\n};\n\n// Add async data loading\nawait useAsyncData('translations', async () => {\n  try {\n    await loadLang();\n  } catch (error) {\n    console.error('Error loading translations:', error);\n  }\n});\n</script>\n\n<style scoped></style>\n"],"version":3}